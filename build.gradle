import com.github.spotbugs.SpotBugsTask

plugins {
  id "com.github.hierynomus.license" version "0.14.0" apply false
  id 'com.github.johnrengelman.shadow' version '2.0.1' apply false
  id "com.github.spotbugs" version "1.6.0" apply false
}

allprojects {
  apply plugin: 'idea'
  group = 'cz.seznam.euphoria'
  version = '0.8.0'
}

subprojects {

  apply plugin: 'java'
  apply plugin: 'com.github.hierynomus.license'
  apply plugin: 'com.github.spotbugs'
  apply from: "${rootProject.projectDir}/gradle/versions.gradle"

  license {
    // ~ TODO: support for other file formats
    include '**/*.java'
    mapping('java', 'SLASHSTAR_STYLE')
    header = rootProject.file('HEADER')
    strictCheck = true
    ext.year = "2016-${Calendar.getInstance().get(Calendar.YEAR)}"
    ext.name = 'Seznam.cz, a.s.'
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "org.slf4j:slf4j-simple:${slf4jVersion}"
  }

  test {
    testLogging {
      events 'skipped', 'failed'
    }
  }

  tasks.withType(SpotBugsTask) {
    effort = 'max'
    reportLevel = 'high'
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
  }
}

// ~ configure euphoria sub-projects (excluding benchmarks and guava)

configure(subprojects.findAll { it.name.matches(/^(euphoria|thirdparty).+$/) }) {

  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  if (it.name.startsWith("euphoria")) {

    // ~ build & publish sources and javadoc jar

    task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = 'sources'
      from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }

    artifacts {
      archives sourcesJar
      archives javadocJar
    }

  } else {

    jar.enabled = false
    configurations.archives.artifacts.with { archives ->
      archives.each {
        archives.remove(it)
      }
    }
  }

  signing {
    sign configurations.archives
  }

  sourceSets {
    test.compileClasspath += configurations.compileOnly
    test.runtimeClasspath += configurations.compileOnly
  }

  publishing {

    publications {

      mavenJava(MavenPublication) {

        groupId 'cz.seznam.euphoria'
        artifactId project.name
        version '0.8.0'
        customizePom(pom, "${groupId}:${artifactId}")

        from components.java

        // create the sign pom artifact

        pom.withXml {
          def pomFile = file("${project.buildDir}/generated-pom.xml")
          writeTo(pomFile)
          def pomAscFile = signing.sign(pomFile).signatureFiles[0]
          artifact(pomAscFile) {
            classifier = null
            extension = 'pom.asc'
          }
        }

        artifacts = []

        if (it.name.startsWith("euphoria")) {

          artifact(sourcesJar) {
            classifier = 'sources'
          }

          artifact(javadocJar) {
            classifier = 'javadoc'
          }

        }

        // create the signed artifacts
        project.tasks.signArchives.signatureFiles.each {
          artifact(it) {
            def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
            if (matcher.find()) {
              classifier = matcher.group(1)
            } else {
              classifier = null
            }
            extension = 'jar.asc'
          }
        }
      }
    }
    repositories {
      maven {
        url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        credentials {
          username sonatypeUsername
          password sonatypePassword
        }
      }
    }
  }

  model {

    tasks.generatePomFileForMavenJavaPublication {
      destination = file("$buildDir/generated-pom.xml")
    }

    tasks.publishMavenJavaPublicationToMavenLocal {
      dependsOn project.tasks.signArchives
    }

    tasks.publishMavenJavaPublicationToMavenRepository {
      dependsOn project.tasks.signArchives
    }
  }
}

def customizePom(pom, pomName) {

  pom.withXml {

    def root = asNode()

    // eliminate test-scoped dependencies (no need in maven central POMs)
    root.dependencies.removeAll { dep ->
      dep.scope == "test"
    }

    // add all items necessary for maven central publication
    root.children().last() + {

      resolveStrategy = Closure.DELEGATE_FIRST

      scm {
        connection 'scm:git:https://github.com/seznam/euphoria.git'
        developerConnection 'scm:git:https://github.com/seznam/euphoria.git'
        url 'https://github.com/seznam/euphoria/'
      }
 
      licenses {
        license {
          name 'The Apache License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
      }
 
      name "${pomName}"
      description """A Java API for creating unified big-data processing flows providing an
engine independent programming model which can express both batch and
stream transformations."""
      organization {
        name 'Seznam.cz, a.s.'
        url 'https://www.seznam.cz'
      }
 
      developers {
        developer {
          id 'je-ik'
          name 'Jan Lukavsky'
          email 'je.ik@seznam.cz'
        }
        developer {
          id 'dmvk'
          name 'David Moravek'
          email 'david.moravek@firma.seznam.cz'
          organization 'Seznam.cz'
          organizationUrl 'https://www.seznam.cz'
        }
      }

      issueManagement {
        system 'GitHub'
        url 'https://github.com/mautini/schemaorg-java/issues'
      }
    }
  }
}


